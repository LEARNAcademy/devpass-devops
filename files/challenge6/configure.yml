# Almost all linux's install python by default. With Ubuntu 16.04 they didn't
# install python because of the flux between python 2 and 3. So we install it now
- hosts: tag_type_nginx
  gather_facts: False
  pre_tasks:
    - name: 'install python2'
      raw: sudo apt-get -y install python-simplejson

# Here we are going to go in to each server and install the list of packages
- name: Configure instance(s)
  hosts: tag_type_nginx
  become: True
  gather_facts: True
  tasks:
    # First we update apt to make sure we are installing the right versions
    - name: update apt cache
      become: yes
      package: update_cache=yes

    - name: install aptitude
      # on Debian Jessie aptitude is not installed by default, without it apt-get upgrade fails
      become: yes
      package: name=aptitude state=installed

    # right now we are not upgrading the servers base pacakges. but we can if we want to
    # - name: upgrade apt packages
    #   become: yes
    #   package: upgrade=full

    - name: install dev tools and libraries
      become: yes
      package: name={{ item }} state=installed
      with_items:
        - build-essential
        - composer
        - curl
        - git
        - libpq-dev
        - libreadline6
        - libreadline6-dev
        - libssl-dev
        - mysql-client
        - mysql-server
        - nginx
        - nodejs
        - npm
        - openssl
        - php7.0-dom
        - php7.0-mbstring
        - php7.0-mysql
        - python-mysqldb
        - unzip
        - zip
        - zlib1g
        - zlib1g-dev

# we are going to do the same steps as we did in challenge 2
- name: Install Node App
  hosts: tag_group_a
  gather_facts: True
  tasks:
    # make sure the directory is write able
    - name: chmod /var/www
      file: dest=/var/www owner=root group=adm mode=u=rwX,g=rwX recurse=yes
      become: yes
    # check the repo out of git on to the server
    - name: clone node app
      git:
        repo: 'https://github.com/LEARNAcademy/http-status-cats-api.git'
        dest: '/var/www/html/webapp'
        version: master
    # in a shell, run npm install. This is just like logging in and typing it
    - name: npm
      shell: 'npm install'
      args:
        chdir: '/var/www/html/webapp'  # notice the explicit directory. You could cd up in "shell", but it wouldn't give you as good an error message
    # Copy a file from the locals 'files' directory up to the remote server. just like with scp.
    # Here we put it in place and set it to the right permissions in one move.
    - copy: src=./files/cats.service dest=/etc/systemd/system/node_cats.service owner=root group=root
      become: yes
    # We never start the process manually in this version, but jump straight to creating a service for it.
    - name: start node
      systemd: state=started name=node_cats daemon_reload=yes
      become: yes


- name: Install Rails App
  hosts: tag_group_a
  gather_facts: True
  # This is our first role.  Yes, we could put all the steps here our selves, but the nice people at RVM
  # maintain this version for us.
  roles:
    - { role: rvm_io.ruby,
        tags: ruby,
        rvm1_rubies: ['ruby-2.3.7', 'ruby-2.4.1'],
        rvm1_user: 'ubuntu'
      }
  tasks:
    # Steps here are very similar to the once above. clone the repo, setup dependencies, install the service and run the service
    - name: chmod /var/www
      file: dest=/var/www owner=root group=adm mode=u=rwX,g=rwX recurse=yes
      become: yes
    - name: clone rails app
      git:
        repo: 'https://github.com/LEARNAcademy/learn-rails.git'
        dest: '/var/www/html/learn-rails'
        version: master
    - name: bundle
      shell: '/home/ubuntu/.rvm/wrappers/ruby-2.4.1/bundle'
      args:
        chdir: '/var/www/html/learn-rails'
    - copy: src=./files/rails.service dest=/etc/systemd/system/rails.service owner=root group=root
      become: yes
    # Notice here the argument "daemon_reload=yes" this is makes the daemon-reload and start all one step, saving us time
    - name: start rails
      systemd: state=started name=rails daemon_reload=yes
      become: yes

- name: Install PHP App
  hosts: tag_group_a
  gather_facts: true
  tasks:
    # again, we clone, install dependencies and start the app. only different steps here are all db related
    - name: clone laravel app
      git:
        repo: 'https://github.com/laravel/quickstart-basic.git'
        dest: '/var/www/html/quickstart'
        version: master
        force: yes
      creates: '/var/www/html/quickstart'
    - copy: src=./files/laravel-env dest=/var/www/html/quickstart/.env owner=ubuntu group=adm
      become: yes
    # ansible has build in know-how when it comes to setting up the database.
    - name: Create a new database with name 'homestead'
      mysql_db:
        name: homestead
        state: present
      become: yes
    # but it doesn't just run sql code easily because of the permissions issue. if this was already run we could run it using an ansible module. but since
    # it has not run yet, we cheat and go out to the shell
    - name: Fix permissions
      shell: "mysql -uroot -e \"use mysql; update user set authentication_string=password(''), plugin='mysql_native_password' where user='root'; flush privileges;\""
      become: yes
    - name: composer install
      shell: 'composer install'
      args:
        chdir: '/var/www/html/quickstart'
    - name: migrate database
      shell: 'php artisan migrate'
      args:
        chdir: '/var/www/html/quickstart'
    - copy: src=./files/laravel.service dest=/etc/systemd/system/laravel.service owner=root group=root
      become: yes
    - name: start laravel
      systemd: state=started name=laravel daemon_reload=yes
      become: yes
## Lastly we copy up the proxy file and restart nginx.
- name: Proxy config
  hosts: tag_group_a
  gather_facts: True
  tasks:
    - copy: src=./files/apps.conf dest=/etc/nginx/sites-available/default owner=root group=root
      become: yes
    - name: restart nginx
      become: yes
      service: name=nginx enabled=yes state=restarted

- name: Backups
  hosts: tag_group_a
  gather_facts: True
  tasks:
    - name: "shell gem install"
      shell: "/home/ubuntu/.rvm/wrappers/ruby-2.3.7/gem install backup"

    - name: "install backup gem"
      gem:
        name: backup
        state: present
        executable: /home/ubuntu/.rvm/wrappers/ruby-2.3.7/gem
    - name: "copy backup.rb file"
      copy: src=./files/backup.rb dest=/home/ubuntu/backup.rb owner=ubuntu group=ubuntu
    - name: "create a cron job to run the backup"
      cron:
        name: "backup"
        minute: "0"
        hour: "5"
        job: "/home/ubuntu/.rvm/gems/ruby-2.3.7/bin/backup perform -c backup.rb -t laravel > /dev/null"

- name: Papertrail
  hosts: tag_group_a
  gather_facts: True
  tasks:
    - name: Download package
      get_url:
        url: "https://github.com/papertrail/remote_syslog2/releases/download/v0.20/remote-syslog2_0.20_amd64.deb"
        dest: /tmp/remote_syslog.deb
        owner: root
        group: root
        mode: 0700
      become: true
    - name: Install package
      apt:
        deb: /tmp/remote_syslog.deb
        state: present
      become: true

    - name: "copy papertrail file"
      copy: src=./files/log_files.yml dest=/etc/log_files.yml
      become: true
 
    - name: Ensure remote_syslog is running
      service:
        name: remote_syslog
        state: started
      become: true

- name: Security and Monitoring
  hosts: tag_group_a
  gather_facts: True
  roles:
    - { role: dj-wasabi.ossec-server, become: yes }
    - { role: notch8.site24x7, become: yes }
    - { role: tommarshall.lynis, tags: [lynis], become: yes }
